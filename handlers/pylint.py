import subprocess
import tempfile
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext

from models import PylintStates
from logger import logger  # —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

router = Router()

@router.message(F.text == "/pylint")
async def start_pylint(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pylint:
    –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è Python-–∫–æ–¥–∞.
    """
    await state.set_state(PylintStates.waiting_for_code)
    logger.debug(f"[Pylint] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–¥–∞")
    await message.answer("–û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–¥ Python –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –∫–∞–∫ –∫–æ–¥.")


@router.message(PylintStates.waiting_for_code)
async def check_code(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –∑–∞–ø—É—Å–∫–∞–µ—Ç pylint –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    code = message.text
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—ë—Ä–Ω—É—Ç –ª–∏ –∫–æ–¥ –≤ Markdown-–±–ª–æ–∫–∏ ```...``` –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    if code.startswith("```") and code.endswith("```"):
        # —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫–∏ (```) –∏ —Å–æ–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
        code = "\n".join(code.split("\n")[1:-1])

    logger.debug(f"[Pylint] –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n{code[:100]}...")  # –ª–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤

    try:
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã pylint)
        with tempfile.NamedTemporaryFile("w", suffix=".py", delete=True) as temp_file:
            temp_file.write(code)    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥ –≤ —Ñ–∞–π–ª
            temp_file.flush()        # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –¥–∏—Å–∫

            logger.debug(f"[Pylint] –ó–∞–ø—É—Å–∫–∞—é pylint –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ: {temp_file.name}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º pylint —Å –Ω—É–∂–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏:
            # --disable=all –æ—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            # --enable=E,F,W,C,R –≤–∫–ª—é—á–∞–µ—Ç –æ—à–∏–±–∫–∏, —Ñ–∞—Ç–∞–ª—å–Ω—ã–µ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∏
            result = subprocess.run(
                ["pylint", temp_file.name, "--disable=all", "--enable=E,F,W,C,R"],
                stdout=subprocess.PIPE,   # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stdout
                stderr=subprocess.PIPE,   # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stderr
                text=True,                # –ø–æ–ª—É—á–∞–µ–º –≤—ã–≤–æ–¥ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
                timeout=10                # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            )

        # –û–±—Ä–µ–∑–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –≤—ã–≤–æ–¥ –æ—Ç –ª–∏—à–Ω–µ–≥–æ
        output = result.stdout.strip()

        if not output:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–≤–æ–¥–∞ ‚Äî –∑–Ω–∞—á–∏—Ç, –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            await message.answer("–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! üéâ")
            logger.info(f"[Pylint] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            # –ï—Å–ª–∏ –≤—ã–≤–æ–¥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–ª–∏–Ω—ã
            if len(output) > 1500:
                output = output[:1500] + "\n\n[–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω...]"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            await message.answer(f"<pre>{output}</pre>", parse_mode="HTML")
            logger.info(f"[Pylint] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞–π–¥–µ–Ω—ã –∑–∞–º–µ—á–∞–Ω–∏—è")

    except subprocess.TimeoutExpired:
        # pylint –Ω–µ —É—Å–ø–µ–ª –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        logger.warning(f"[Pylint] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∫–æ–¥.")
    except Exception as e:
        # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        logger.exception(f"[Pylint] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞ üò¢")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
