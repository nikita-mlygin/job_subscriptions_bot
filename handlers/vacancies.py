from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext

from utils.hh_api import fetch_vacancies
from config import CITIES
from utils.user_settings_db import get_user_settings
from logger import logger  # —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä

# –†–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /vacancies
router = Router()

@router.message(F.text.startswith("/vacancies"))
async def vacancies(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /vacancies [–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞].

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (types.Message): –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state (FSMContext): –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)

    –õ–æ–≥–∏–∫–∞:
        1. –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.
        2. –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥–æ—Ä–æ–¥, —É—Ä–æ–≤–µ–Ω—å).
        3. –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.
        4. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ —á–µ—Ä–µ–∑ API.
        5. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    user_id = message.from_user.id
    logger.info(f"[VACANCIES] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤–∞–∫–∞–Ω—Å–∏–∏")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)
    parts = message.text.split(maxsplit=1)
    keywords = parts[1] if len(parts) > 1 else "python"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    user_settings = await get_user_settings(user_id)
    level = user_settings.get("level")           # junior / middle / senior
    city_id = user_settings.get("city_id", "1")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    display_level = level.capitalize() if level else "–ª—é–±–æ–π"
    city_name = CITIES.get(city_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    logger.debug(f"[VACANCIES] –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}, —É—Ä–æ–≤–µ–Ω—å: {display_level}, –≥–æ—Ä–æ–¥: {city_name}")

    await message.answer(
        f"–ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{keywords}</b>, —É—Ä–æ–≤–µ–Ω—å: <b>{display_level}</b>, –≥–æ—Ä–æ–¥: <b>{city_name}</b>‚Ä¶"
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é API
        items = fetch_vacancies(keywords=keywords, level=level, area=city_id)

        if not items:
            await message.answer("–í–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            logger.info(f"[VACANCIES] –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {user_id}")
            return

        logger.info(f"[VACANCIES] –ù–∞–π–¥–µ–Ω–æ {len(items)} –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è {user_id}")

        for v in items:
            await message.answer(f"<b>{v['name']}</b>\n{v['alternate_url']}")
    except Exception as e:
        logger.exception(f"[VACANCIES] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π üò¢")
