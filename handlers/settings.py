from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import types, F, Router
from utils.user_settings_db import get_user_settings, update_user_settings
from config import CITIES
from logger import logger  # —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

router = Router()


@router.message(F.text == "/settings")
async def settings_main_menu(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞, —É—Ä–æ–≤–Ω—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    """
    logger.info(f"[Settings] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="city", callback_data="settings:city")],
        [InlineKeyboardButton(text="level", callback_data="settings:level")],
        [InlineKeyboardButton(text="–ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings:show")],
    ])
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –∏ inline-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)


@router.callback_query(F.data == "settings:city")
async def settings_city(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞, –∞ —Ç–∞–∫–∂–µ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    user_id = callback.from_user.id
    logger.info(f"[Settings] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –º–µ–Ω—é –≥–æ—Ä–æ–¥–æ–≤")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–æ—Ä–æ–¥–∞–º–∏, –∫–∞–∂–¥—ã–π callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç id –≥–æ—Ä–æ–¥–∞
    buttons = [[InlineKeyboardButton(text=name, callback_data=f"set_city:{cid}")] for cid, name in CITIES.items()]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    buttons.append([InlineKeyboardButton(text="‚¨Ö –Ω–∞–∑–∞–¥", callback_data="settings:main")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=keyboard)
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback (—É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram)
    await callback.answer()


@router.callback_query(F.data == "settings:level")
async def settings_level(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏, –∏ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    user_id = callback.from_user.id
    logger.info(f"[Settings] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –º–µ–Ω—é —É—Ä–æ–≤–Ω–µ–π")

    levels = ["junior", "middle", "senior"]
    # –ö–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É—Ä–æ–≤–Ω–µ–π –∏ callback_data —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
    buttons = [[InlineKeyboardButton(text=level.capitalize(), callback_data=f"set_level:{level}")] for level in levels]
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton(text="‚¨Ö –Ω–∞–∑–∞–¥", callback_data="settings:main")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —É—Ä–æ–≤–Ω—è
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "settings:main")
async def return_to_main_menu(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    user_id = callback.from_user.id
    logger.info(f"[Settings] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    await settings_main_menu(callback.message)
    await callback.answer()


@router.callback_query(F.data.startswith("set_level:"))
async def process_level(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è.
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    user_id = callback.from_user.id
    level = callback.data.split(":")[1]
    logger.info(f"[Settings] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —É—Ä–æ–≤–µ–Ω—å: {level}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await update_user_settings(user_id, level=level)
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    await callback.message.answer(f"–£—Ä–æ–≤–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {level.capitalize()}")
    await callback.answer()


@router.callback_query(F.data.startswith("set_city:"))
async def process_city(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    user_id = callback.from_user.id
    city_id = callback.data.split(":")[1]
    city_name = CITIES.get(city_id, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    logger.info(f"[Settings] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≥–æ—Ä–æ–¥: {city_name} ({city_id})")

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await update_user_settings(user_id, city_id=city_id)
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    await callback.message.answer(f"–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {city_name}")
    await callback.answer()


@router.callback_query(F.data == "settings:show")
async def show_user_settings(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    user_id = callback.from_user.id
    logger.info(f"[Settings] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã
    settings = await get_user_settings(user_id)
    city = settings.get("city_id")
    level = settings.get("level")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –ø–æ–Ω—è—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    text = f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\nüåÜ –ì–æ—Ä–æ–¥: {CITIES.get(city, '–Ω–µ –≤—ã–±—Ä–∞–Ω')}\nüéØ –£—Ä–æ–≤–µ–Ω—å: {level if level else '–Ω–µ –≤—ã–±—Ä–∞–Ω'}"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.answer(text)
