from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
import json
import random
from logger import logger  # —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from utils.user_settings_db import get_user_settings

router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
with open("learning_data.json", encoding="utf-8") as f:
    learning_data = json.load(f)

# –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–≤–µ—Ç—ã –ø–æ Python –∏ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
PYTHON_TIPS = learning_data["tips"]
LEARNING_RESOURCES = learning_data["resources"]


@router.message(F.text == "/tip")
async def send_python_tip(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tip.
    –ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM, –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è,
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ FSM, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é junior)
    user_settings = await get_user_settings(user_id)
    level = user_settings.get("level", "junior") # junior / middle / senior

    logger.info(f"[Tip] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è '{level}'")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
    tips_for_level = PYTHON_TIPS.get(level, [])
    if not tips_for_level:
        # –ï—Å–ª–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –Ω–µ—Ç —Å–æ–≤–µ—Ç–æ–≤ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.warning(f"[Tip] –î–ª—è —É—Ä–æ–≤–Ω—è '{level}' –Ω–µ—Ç —Å–æ–≤–µ—Ç–æ–≤.")
        await message.answer(f"–°–æ–≤–µ—Ç–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è {level.capitalize()} –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    tip = random.choice(tips_for_level)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(f"–°–æ–≤–µ—Ç –¥–ª—è {level.capitalize()}:\nüí° {tip}")


@router.message(F.text == "/learn")
async def send_learning_resources(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /learn.
    –ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ FSM, –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—É—á–∞—é—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è,
    —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ FSM, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é junior)
    user_settings = await get_user_settings(user_id)
    level = user_settings.get("level", "junior") # junior / middle / senior

    logger.info(f"[Learn] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —É—Ä–æ–≤–Ω—è '{level}'")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    resources_for_level = LEARNING_RESOURCES.get(level, [])
    if not resources_for_level:
        # –ï—Å–ª–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        logger.warning(f"[Learn] –î–ª—è —É—Ä–æ–≤–Ω—è '{level}' –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.")
        await message.answer(f"–†–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è {level.capitalize()} –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ—á–Ω–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –≤–∏–¥–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    text = f"–†–µ—Å—É—Ä—Å—ã –¥–ª—è {level.capitalize()}:\n" + "\n".join(f"‚Ä¢ {res}" for res in resources_for_level)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(text)
