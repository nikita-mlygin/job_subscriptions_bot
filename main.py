from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram import F
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
import feedparser
from aiogram import types
from hh_api import fetch_vacancies
import asyncio
from aiogram import Router
from datetime import datetime
import random

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import storage

import tempfile
import subprocess
from aiogram import F, types

from aiogram import F, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import json

import asyncio
from datetime import datetime, timedelta, timezone
from pytz import utc  # –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞

import tempfile
import subprocess
from pymongo import MongoClient


import config

CITIES = {
    "1": "–ú–æ—Å–∫–≤–∞",
    "2": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
    "3": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
    "4": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    "5": "–ö–∞–∑–∞–Ω—å"
}

RSS_URLS = [
    "https://planetpython.org/rss20.xml",
    "https://www.python.org/events/python-events/rss/",
    "https://realpython.com/atom.xml",
    "https://pyfound.blogspot.com/feeds/posts/default",
    "https://pycoders.com/feed/"
]

client = MongoClient("mongodb://localhost:27017/")
db = client["job_bot_db"]
router = Router()
subscriptions_collection = db["subscriptions"]

class SubscriptionForm(StatesGroup):
    keywords = State()
    level = State()
    area = State()
    frequency = State()
    confirm = State()

with open("learning_data.json", encoding="utf-8") as f:
    learning_data = json.load(f)

PYTHON_TIPS = learning_data["tips"]
LEARNING_RESOURCES = learning_data["resources"]




bot = Bot(
    token=config.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher()


@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer("Hello, world!")


@dp.message(F.text.startswith("/vacancies"))
async def vacancies(message: types.Message, state: FSMContext):
    parts = message.text.split(maxsplit=1)
    keywords = parts[1] if len(parts) > 1 else "python"

    data = await state.get_data()
    city_id = data.get("city_id", "1")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞
    level = data.get("level", None)

    display_level = level.capitalize() if level else "–ª—é–±–æ–π"
    await message.answer(
        f"–ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{keywords}</b>, —É—Ä–æ–≤–µ–Ω—å: <b>{display_level}</b>, –≥–æ—Ä–æ–¥: <b>{CITIES.get(city_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</b>‚Ä¶"
    )

    try:
        items = fetch_vacancies(keywords=keywords, level=level, area=city_id)
        if not items:
            await message.answer("–í–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        for v in items:
            await message.answer(f"<b>{v['name']}</b>\n{v['alternate_url']}")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π üò¢")
        print("–û—à–∏–±–∫–∞:", e)


@dp.message(F.text == "/settings")
async def settings_main_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="city", callback_data="settings:city")],
        [InlineKeyboardButton(text="level", callback_data="settings:level")],
        [InlineKeyboardButton(text="–ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings:show")],
    ])
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)
    
@dp.callback_query(F.data == "settings:city")
async def settings_city(callback: types.CallbackQuery):
    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"set_city:{cid}")]
        for cid, name in CITIES.items()
    ]
    buttons.append([InlineKeyboardButton(text="‚¨Ö –Ω–∞–∑–∞–¥", callback_data="settings:main")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "settings:level")
async def settings_level(callback: types.CallbackQuery):
    levels = ["junior", "middle", "senior"]
    buttons = [
        [InlineKeyboardButton(text=level.capitalize(), callback_data=f"set_level:{level}")]
        for level in levels
    ]
    buttons.append([InlineKeyboardButton(text="‚¨Ö –Ω–∞–∑–∞–¥", callback_data="settings:main")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "settings:main")
async def return_to_main_menu(callback: types.CallbackQuery):
    await settings_main_menu(callback.message)
    await callback.answer()
    
@dp.callback_query(F.data.startswith("set_level:"))
async def process_level(callback: types.CallbackQuery, state: FSMContext):
    level = callback.data.split(":")[1]
    await state.update_data(level=level)
    await callback.message.answer(f"–£—Ä–æ–≤–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {level.capitalize()}")
    await callback.answer()
    
@dp.callback_query(F.data.startswith("set_city:"))
async def process_city(callback: types.CallbackQuery, state: FSMContext):
    city_id = callback.data.split(":")[1]
    await state.update_data(city_id=city_id)
    await callback.message.answer(f"–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {CITIES[city_id]}")
    await callback.answer()
    
@dp.callback_query(F.data == "settings:show")
async def show_user_settings(callback: CallbackQuery, state: FSMContext):
    print("getting user data")
    data = await state.get_data()
    print("user data is here")
    city = data.get("city_id", "–Ω–µ –≤—ã–±—Ä–∞–Ω")
    level = data.get("level", "–Ω–µ –≤—ã–±—Ä–∞–Ω")

    text = f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\nüåÜ –ì–æ—Ä–æ–¥: {CITIES[city]}\nüéØ –£—Ä–æ–≤–µ–Ω—å: {level}"
    await callback.message.answer(text)
    
def parse_date(entry):
    if hasattr(entry, "published_parsed") and entry.published_parsed:
        return datetime(*entry.published_parsed[:6])
    if hasattr(entry, "updated_parsed") and entry.updated_parsed:
        return datetime(*entry.updated_parsed[:6])
    return datetime.min


@dp.message(F.text == "/news")
async def news(message: types.Message):
    all_entries = []

    for url in RSS_URLS:
        feed = feedparser.parse(url)
        all_entries.extend(feed.entries)

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å–≤–µ–∂–∏–µ —Å–≤–µ—Ä—Ö—É)
    all_entries.sort(key=parse_date, reverse=True)

    if not all_entries:
        await message.answer("–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    for entry in all_entries[:5]:
        title = entry.title
        link = entry.link
        published = entry.get("published", entry.get("updated", "–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"))
        await message.answer(f"<b>{title}</b>\n{published}\n{link}")
        
class PylintStates(StatesGroup):
    waiting_for_code = State()

@dp.message(F.text == "/pylint")
async def start_pylint(message: types.Message, state: FSMContext):
    await state.set_state(PylintStates.waiting_for_code)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–¥ Python –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –∫–∞–∫ –∫–æ–¥.")

@dp.message(PylintStates.waiting_for_code)
async def check_code(message: types.Message, state: FSMContext):
    code = message.text

    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –æ—Ç markdown, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–±—Ä–∞—Ç—å ```python ... ```
    if code.startswith("```") and code.endswith("```"):
        code = "\n".join(code.split("\n")[1:-1])

    with tempfile.NamedTemporaryFile("w", suffix=".py", delete=True) as temp_file:
        temp_file.write(code)
        temp_file.flush()

        result = subprocess.run(
            ["pylint", temp_file.name, "--disable=all", "--enable=E,F,W,C,R"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            timeout=10
        )

    output = result.stdout.strip()
    if not output:
        await message.answer("–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! üéâ")
    else:
        if len(output) > 1500:
            output = output[:1500] + "\n\n[–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω...]"
        await message.answer(f"<pre>{output}</pre>", parse_mode="HTML")

    await state.clear()

@dp.message(F.text == "/tip")
async def send_python_tip(message: types.Message, state: FSMContext):
    data = await state.get_data()
    level = data.get("level", "beginner")
    tip = random.choice(PYTHON_TIPS.get(level, []))
    await message.answer(f"–°–æ–≤–µ—Ç –¥–ª—è {level.capitalize()}:\nüí° {tip}")

@dp.message(F.text == "/learn")
async def send_learning_resources(message: types.Message, state: FSMContext):
    data = await state.get_data()
    level = data.get("level", "beginner")
    resources = LEARNING_RESOURCES.get(level, [])
    text = f"–†–µ—Å—É—Ä—Å—ã –¥–ª—è {level.capitalize()}:\n" + "\n".join(f"‚Ä¢ {res}" for res in resources)
    await message.answer(text)
    
############    
# –ü–û–î–ü–ò–°–ö–ê #
############

async def daily_job_sending(dp: Dispatcher):
    while True:
        print("–°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π")
        now = datetime.now(timezone.utc)
        subscriptions = list(subscriptions_collection.find({}))

        for sub in subscriptions:
            user_id = sub["user_id"]
            keywords = sub.get("keywords")
            level = sub.get("level")
            area = sub.get("area")
            last_sent = sub.get("last_sent")
            frequency = sub.get("frequency")

            if frequency == "weekly":
                if last_sent and (now - last_sent).days < 7:
                    continue
                minutes_since_last = (now - last_sent).total_seconds() / 60 if last_sent else 7 * 24 * 60
            elif frequency == "daily":
                if last_sent and (now - last_sent).days < 1:
                    continue
                minutes_since_last = (now - last_sent).total_seconds() / 60 if last_sent else 24 * 60
            else:
                minutes_since_last = None  # –∏–ª–∏ –ª—é–±–æ–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

            text = " ".join(filter(None, [level, keywords]))
            area_param = area if area else None

            try:
                items = fetch_vacancies(
                    level=level,
                    keywords=keywords,
                    area=area_param,
                    per_page=5,
                    since_minutes_ago=int(minutes_since_last) if minutes_since_last else None
                )
                if not items:
                    continue

                for v in items:
                    url = v.get("alternate_url")
                    name = v.get("name")
                    await bot.send_message(user_id, f"<b>{name}</b>\n{url}")

                subscriptions_collection.update_one(
                    {"user_id": user_id},
                    {"$set": {"last_sent": now}}
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–ø–∏—Å—á–∏–∫—É {user_id}: {e}")

        await asyncio.sleep(86400)

def save_subscription(subscription: dict):
    user_id = subscription.get("user_id")
    if not user_id:
        raise ValueError("user_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    subscriptions_collection.update_one(
        {"user_id": user_id},
        {"$set": subscription},
        upsert=True
    )

@dp.message(F.text.startswith("/subscribe"))
async def handle_subscribe(message: types.Message, state: FSMContext):
    await message.answer("–£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: python backend):")
    await state.set_state(SubscriptionForm.keywords)

@dp.message(SubscriptionForm.keywords)
async def handle_keywords(message: types.Message, state: FSMContext):
    await state.update_data(keywords=message.text)
    await message.answer("–£–∫–∞–∂–∏ —É—Ä–æ–≤–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: junior, middle, senior) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ /skip:")
    await state.set_state(SubscriptionForm.level)

@dp.message(SubscriptionForm.level)
async def handle_level(message: types.Message, state: FSMContext):
    if message.text.strip().lower() != "/skip":
        await state.update_data(level=message.text.strip().lower())
    await message.answer("–£–∫–∞–∂–∏ —Ä–µ–≥–∏–æ–Ω (area id, –Ω–∞–ø—Ä–∏–º–µ—Ä: 113 –¥–ª—è –≤—Å–µ–π –†–æ—Å—Å–∏–∏) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ /skip:")
    await state.set_state(SubscriptionForm.area)

@dp.message(SubscriptionForm.area)
async def handle_area(message: types.Message, state: FSMContext):
    if message.text.strip().lower() != "/skip":
        await state.update_data(area=message.text.strip())
    await message.answer("–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏? (daily/weekly):")
    await state.set_state(SubscriptionForm.frequency)

@dp.message(SubscriptionForm.frequency)
async def handle_frequency(message: types.Message, state: FSMContext):
    freq = message.text.strip().lower()
    if freq not in ("daily", "weekly"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ 'daily' –∏–ª–∏ 'weekly'.")
        return

    await state.update_data(frequency=freq, last_sent=None)

    data = await state.get_data()
    preview = (
        f"–ü–æ–¥–ø–∏—Å–∫–∞:\n"
        f"- –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {data.get('keywords')}\n"
        f"- —É—Ä–æ–≤–µ–Ω—å: {data.get('level', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"- —Ä–µ–≥–∏–æ–Ω: {data.get('area', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"- —á–∞—Å—Ç–æ—Ç–∞: {data.get('frequency')}"
    )

    await message.answer(preview + "\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥–æ–π /confirm –∏–ª–∏ /cancel")
    await state.set_state(SubscriptionForm.confirm)

@dp.message(F.text == "/confirm", SubscriptionForm.confirm)
async def confirm_subscription(message: types.Message, state: FSMContext):
    data = await state.get_data()
    subscription = {
        "user_id": message.from_user.id,
        "keywords": data.get("keywords"),
        "level": data.get("level"),
        "area": data.get("area"),
        "frequency": data.get("frequency"),
        "last_sent": None
    }
    save_subscription(subscription)
    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ")
    await state.clear()

@dp.message(F.text == "/cancel")
async def cancel_subscription(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
@dp.message(F.text == "/show_subscriptions")
async def show_subscriptions(message: types.Message):
    user_id = message.from_user.id
    subs = list(subscriptions_collection.find({"user_id": user_id}))
    if not subs:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
        return

    texts = []
    for i, sub in enumerate(subs, start=1):
        texts.append(
            f"{i}) –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {sub.get('keywords', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
            f"   —É—Ä–æ–≤–µ–Ω—å: {sub.get('level', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"   —Ä–µ–≥–∏–æ–Ω: {sub.get('area', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"   —á–∞—Å—Ç–æ—Ç–∞: {sub.get('frequency', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        )

    await message.answer("–¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n" + "\n".join(texts))


async def main():
    asyncio.create_task(daily_job_sending(dp))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())